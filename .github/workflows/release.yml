name: Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'The release version (e.g., v1.8.0). This will be used to create the Git tag.'
        required: true
        type: string
      source_branch:
        description: 'The branch to find the latest successful build artifact on.'
        required: true
        type: string
        default: 'main'

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    timeout-minutes: 30
    permissions:
      contents: write

    steps:
      # Step 1: Checkout repository code
      - name: Checkout code
        uses: actions/checkout@v4

      # Step 2: Delete existing tag if it exists, so the new tag is created with the release time
      # This ensures that the tag time and release time are always consistent
      - name: Delete existing tag (if any)
        uses: actions/github-script@v7
        with:
          script: |
            const tag = '${{ github.event.inputs.version }}';
            try {
              await github.git.deleteRef({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: `tags/${tag}`
              });
              console.log(`Deleted existing tag: ${tag}`);
            } catch (e) {
              console.log(`Tag ${tag} does not exist or already deleted.`);
            }

      # Step 3: Download the build artifact produced by your build workflow
      - name: Download artifact from build workflow
        uses: dawidd6/action-download-artifact@v6
        with:
          workflow: build.yml
          branch: ${{ github.event.inputs.source_branch }}
          event: pull_request
          allow_forks: true
          name: npm-package
          path: ./release-assets
          workflow_conclusion: success

      # Step 4: Rename the artifact to a standardized release filename
      - name: Prepare release assets
        id: prepare_assets
        run: |
          ARTIFACT_FILE=$(find ./release-assets -name "*.tar.gz")
          if [ -z "$ARTIFACT_FILE" ]; then
            echo "::error::Build artifact not found in ./release-assets! Make sure the 'Build' workflow ran successfully on the '${{ github.event.inputs.source_branch }}' branch."
            exit 1
          fi
          VERSION_TAG="${{ github.event.inputs.version }}"
          VERSION_NUM="${VERSION_TAG#v}"
          NEW_FILENAME="code-editor${VERSION_NUM}.tar.gz"
          mv "$ARTIFACT_FILE" "./release-assets/$NEW_FILENAME"
          echo "Renamed artifact to $NEW_FILENAME"
          echo "filename=./release-assets/$NEW_FILENAME" >> $GITHUB_OUTPUT

      # Step 5: Create the release and upload the asset, also create the tag
      # This step will generate release notes, tag, and ensure all times match
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          name: CodeEditor ${{ github.event.inputs.version }}
          tag_name: ${{ github.event.inputs.version }}
          files: ${{ steps.prepare_assets.outputs.filename }}
          draft: false
          generate_release_notes: true
