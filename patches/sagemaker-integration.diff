Index: sagemaker-code-editor/vscode/src/vs/workbench/browser/client.ts
===================================================================
--- /dev/null
+++ sagemaker-code-editor/vscode/src/vs/workbench/browser/client.ts
@@ -0,0 +1,61 @@
+import { Disposable } from '../../base/common/lifecycle.js';
+import { CommandsRegistry } from '../../platform/commands/common/commands.js';
+import { MenuId, MenuRegistry } from "../../platform/actions/common/actions.js";
+import { localize } from "../../nls.js";
+import { ILogService } from "../../platform/log/common/log.js";
+
+export class SagemakerServerClient extends Disposable {
+	constructor (
+		@ILogService private logService: ILogService
+	) {
+		super();
+
+		this.logService.debug('Initializing SagemakerServerClient...');
+		this.registerSagemakerCommands();
+	}
+
+	static LOGOUT_COMMAND_ID = 'sagemaker.logout';
+	static COOKIE_COMMAND_ID = 'sagemaker.parseCookies';
+
+	private registerSagemakerCommands() {
+		const authMode: string | undefined = this.getCookieValue('authMode');
+		const expiryTime: string | undefined = this.getCookieValue('expiryTime');
+		const studioUserProfileName: string | undefined = this.getCookieValue('studioUserProfileName')
+		const ssoExpiryTimestamp: string | undefined = this.getCookieValue('ssoExpiryTimestamp')
+		const redirectURL: string | undefined = this.getCookieValue('redirectURL')
+
+		this.logService.debug('Registering sagemaker commands...');
+
+		CommandsRegistry.registerCommand(SagemakerServerClient.COOKIE_COMMAND_ID, () => {
+			return {
+				authMode: authMode,
+				expiryTime: expiryTime,
+				ssoExpiryTimestamp: ssoExpiryTimestamp,
+				studioUserProfileName: studioUserProfileName,
+				redirectURL: redirectURL
+			};
+		});
+
+		CommandsRegistry.registerCommand(SagemakerServerClient.LOGOUT_COMMAND_ID, () => {
+			const currentUrl = new URL(window.location.href);
+			const hostname = currentUrl.hostname;
+			const pathComponents = currentUrl.pathname.split('/');
+			const logoutUrl = `https://${hostname}/${pathComponents[1]}/${pathComponents[2]}/logout`;
+			window.location.href = logoutUrl;
+		});
+
+		for (const menuId of [MenuId.CommandPalette, MenuId.MenubarHomeMenu]) {
+			MenuRegistry.appendMenuItem(menuId, {
+				command: {
+					id: SagemakerServerClient.LOGOUT_COMMAND_ID,
+					title: localize('logout', "{0}: Log out", 'Sagemaker'),
+				},
+			});
+		}
+	}
+
+	private getCookieValue(name: string): string | undefined {
+		const match = document.cookie.match('(^|[^;]+)\\s*' + name + '\\s*=\\s*([^;]+)'); // See https://stackoverflow.com/a/25490531
+		return match ? match.pop() : undefined;
+	}
+}
\ No newline at end of file
Index: sagemaker-code-editor/vscode/src/vs/workbench/browser/web.main.ts
===================================================================
--- sagemaker-code-editor.orig/vscode/src/vs/workbench/browser/web.main.ts
+++ sagemaker-code-editor/vscode/src/vs/workbench/browser/web.main.ts
@@ -95,6 +95,7 @@ import { TunnelSource } from '../services/remote/common/tunnelModel.js';
 import { TunnelSource } from '../services/remote/common/tunnelModel.js';
 import { mainWindow } from '../../base/browser/window.js';
 import { INotificationService, Severity } from '../../platform/notification/common/notification.js';
+import { SagemakerServerClient } from './client.js';
 
 export class BrowserMain extends Disposable {
 
@@ -129,6 +130,9 @@ export class BrowserMain extends Disposable {
 
 		// Startup
 		const instantiationService = workbench.startup();
+
+		// Create instance of SagemakerServerClient
+		this._register(instantiationService.createInstance(SagemakerServerClient));
 
 		// Window
 		this._register(instantiationService.createInstance(BrowserWindow));
Index: sagemaker-code-editor/vscode/product.json
===================================================================
--- sagemaker-code-editor.orig/vscode/product.json
+++ sagemaker-code-editor/vscode/product.json
@@ -1,6 +1,6 @@
 {
-	"nameShort": "Code - OSS",
-	"nameLong": "Code - OSS",
+	"nameShort": "SageMaker Code Editor",
+	"nameLong": "SageMaker Code Editor",
 	"applicationName": "code-oss",
 	"dataFolderName": ".vscode-oss",
 	"win32MutexName": "vscodeoss",
@@ -34,52 +34,16 @@
 	"urlProtocol": "code-oss",
 	"webviewContentExternalBaseUrlTemplate": "https://{{uuid}}.vscode-cdn.net/insider/ef65ac1ba57f57f2a3961bfe94aa20481caca4c6/out/vs/workbench/contrib/webview/browser/pre/",
 	"builtInExtensions": [
-		{
-			"name": "ms-vscode.js-debug-companion",
-			"version": "1.1.3",
-			"sha256": "7380a890787452f14b2db7835dfa94de538caf358ebc263f9d46dd68ac52de93",
-			"repo": "https://github.com/microsoft/vscode-js-debug-companion",
-			"metadata": {
-				"id": "99cb0b7f-7354-4278-b8da-6cc79972169d",
-				"publisherId": {
-					"publisherId": "5f5636e7-69ed-4afe-b5d6-8d231fb3d3ee",
-					"publisherName": "ms-vscode",
-					"displayName": "Microsoft",
-					"flags": "verified"
-				},
-				"publisherDisplayName": "Microsoft"
-			}
-		},
-		{
-			"name": "ms-vscode.js-debug",
-			"version": "1.100.1",
-			"sha256": "8c2218df3422d45b95e96d9d28cdc4aa4426a2799aaaedd862d3f60ecab03844",
-			"repo": "https://github.com/microsoft/vscode-js-debug",
-			"metadata": {
-				"id": "25629058-ddac-4e17-abba-74678e126c5d",
-				"publisherId": {
-					"publisherId": "5f5636e7-69ed-4afe-b5d6-8d231fb3d3ee",
-					"publisherName": "ms-vscode",
-					"displayName": "Microsoft",
-					"flags": "verified"
-				},
-				"publisherDisplayName": "Microsoft"
-			}
-		},
-		{
-			"name": "ms-vscode.vscode-js-profile-table",
-			"version": "1.0.10",
-			"sha256": "7361748ddf9fd09d8a2ed1f2a2d7376a2cf9aae708692820b799708385c38e08",
-			"repo": "https://github.com/microsoft/vscode-js-profile-visualizer",
-			"metadata": {
-				"id": "7e52b41b-71ad-457b-ab7e-0620f1fc4feb",
-				"publisherId": {
-					"publisherId": "5f5636e7-69ed-4afe-b5d6-8d231fb3d3ee",
-					"publisherName": "ms-vscode",
-					"displayName": "Microsoft",
-					"flags": "verified"
-				},
-				"publisherDisplayName": "Microsoft"
-			}
-		}
+	],
+	"extensionsGallery": {
+		"serviceUrl": "https://open-vsx.org/vscode/gallery",
+		"itemUrl": "https://open-vsx.org/vscode/item",
+		"resourceUrlTemplate": "https://open-vsx.org/vscode/unpkg/{publisher}/{name}/{version}/{path}",
+		"controlUrl": "",
+		"recommendationsUrl": "",
+		"nlsBaseUrl": "",
+		"publisherUrl": ""
+	},
+	"linkProtectionTrustedDomains": [
+		"https://open-vsx.org"
 	]
Index: sagemaker-code-editor/vscode/src/vs/platform/product/common/product.ts
===================================================================
--- sagemaker-code-editor.orig/vscode/src/vs/platform/product/common/product.ts
+++ sagemaker-code-editor/vscode/src/vs/platform/product/common/product.ts
@@ -59,15 +59,17 @@ else {
 	if (Object.keys(product).length === 0) {
 		Object.assign(product, {
 			version: '1.95.0-dev',
-			nameShort: 'Code - OSS Dev',
-			nameLong: 'Code - OSS Dev',
+			nameShort: 'CodeEditor',
+			nameLong: 'Code Editor',
 			applicationName: 'code-oss',
 			dataFolderName: '.vscode-oss',
+			commit: "hellocommit",
+			date: "hellodate",
 			urlProtocol: 'code-oss',
 			reportIssueUrl: 'https://github.com/microsoft/vscode/issues/new',
 			licenseName: 'MIT',
 			licenseUrl: 'https://github.com/microsoft/vscode/blob/main/LICENSE.txt',
-			serverLicenseUrl: 'https://github.com/microsoft/vscode/blob/main/LICENSE.txt'
+			serverLicenseUrl: 'https://github.com/microsoft/vscode/blob/main/LICENSE.txt',
 		});
 	}
 }
Index: sagemaker-code-editor/vscode/src/vs/workbench/contrib/welcomeGettingStarted/browser/gettingStarted.ts
===================================================================
--- sagemaker-code-editor.orig/vscode/src/vs/workbench/contrib/welcomeGettingStarted/browser/gettingStarted.ts
+++ sagemaker-code-editor/vscode/src/vs/workbench/contrib/welcomeGettingStarted/browser/gettingStarted.ts
@@ -779,8 +779,8 @@ export class GettingStartedPage extends EditorPane {
 		}));
 
 		const header = $('.header', {},
-			$('h1.product-name.caption', {}, this.productService.nameLong),
-			$('p.subtitle.description', {}, localize({ key: 'gettingStarted.editingEvolved', comment: ['Shown as subtitle on the Welcome page.'] }, "Editing evolved"))
+			$('h1.product-name.caption', {}, "Code Editor"),
+			$('p.subtitle.description', {}, localize({ key: 'gettingStarted.editingEvolved', comment: ['Shown as subtitle on the Welcome page.'] }, "Based on Code-OSS, Visual Studio Code Open Source"))
 		);
 
 		const leftColumn = $('.categories-column.categories-column-left', {},);
Index: sagemaker-code-editor/vscode/extensions/git/package.nls.json
===================================================================
--- sagemaker-code-editor.orig/vscode/extensions/git/package.nls.json
+++ sagemaker-code-editor/vscode/extensions/git/package.nls.json
@@ -217,7 +217,7 @@
 		"message": "List of git commands (ex: commit, push) that would have their `stdout` logged to the [git output](command:git.showOutput). If the git command has a client-side hook configured, the client-side hook's `stdout` will also be logged to the [git output](command:git.showOutput).",
 		"comment": [
 			"{Locked='](command:git.showOutput'}",
-			"Do not translate the 'command:*' part inside of the '(..)'. It is an internal command syntax for VS Code",
+			"Do not translate the 'command:*' part inside of the '(..)'. It is an internal command syntax for Code-OSS",
 			"Please make sure there is no space between the right bracket and left parenthesis:  ]( this is an internal syntax for links"
 		]
 	},
@@ -245,8 +245,8 @@
 	"config.untrackedChanges.hidden": "Untracked changes are hidden and excluded from several actions.",
 	"config.requireGitUserConfig": "Controls whether to require explicit Git user configuration or allow Git to guess if missing.",
 	"config.showCommitInput": "Controls whether to show the commit input in the Git source control panel.",
-	"config.terminalAuthentication": "Controls whether to enable VS Code to be the authentication handler for Git processes spawned in the Integrated Terminal. Note: Terminals need to be restarted to pick up a change in this setting.",
-	"config.terminalGitEditor": "Controls whether to enable VS Code to be the Git editor for Git processes spawned in the integrated terminal. Note: Terminals need to be restarted to pick up a change in this setting.",
+	"config.terminalAuthentication": "Controls whether to enable Code-OSS to be the authentication handler for Git processes spawned in the Integrated Terminal. Note: Terminals need to be restarted to pick up a change in this setting.",
+	"config.terminalGitEditor": "Controls whether to enable Code-OSS to be the Git editor for Git processes spawned in the integrated terminal. Note: Terminals need to be restarted to pick up a change in this setting.",
 	"config.timeline.showAuthor": "Controls whether to show the commit author in the Timeline view.",
 	"config.timeline.showUncommitted": "Controls whether to show uncommitted changes in the Timeline view.",
 	"config.timeline.date": "Controls which date to use for items in the Timeline view.",
Index: sagemaker-code-editor/vscode/src/vs/workbench/contrib/welcomeGettingStarted/common/gettingStartedContent.ts
===================================================================
--- sagemaker-code-editor.orig/vscode/src/vs/workbench/contrib/welcomeGettingStarted/common/gettingStartedContent.ts
+++ sagemaker-code-editor/vscode/src/vs/workbench/contrib/welcomeGettingStarted/common/gettingStartedContent.ts
@@ -257,8 +257,8 @@ export const walkthroughs: GettingStartedWalkthroughCo
 
 	{
 		id: 'SetupWeb',
-		title: localize('gettingStarted.setupWeb.title', "Get Started with VS Code for the Web"),
-		description: localize('gettingStarted.setupWeb.description', "Customize your editor, learn the basics, and start coding"),
+		title: localize('gettingStarted.setupWeb.title', "Get Started with Code Editor"),
+		description: localize('gettingStarted.setupWeb.description', "Discover the best customizations to make Code Editor yours."),
 		isFeatured: true,
 		icon: setupIcon,
 		when: 'isWeb',
