Index: sagemaker-code-editor/vscode/src/vs/platform/product/common/product.ts
===================================================================
--- sagemaker-code-editor.orig/vscode/src/vs/platform/product/common/product.ts
+++ sagemaker-code-editor/vscode/src/vs/platform/product/common/product.ts
@@ -47,6 +47,27 @@ else if (globalThis._VSCODE_PRODUCT_JSON
 			version: pkg.version
 		});
 	}
+
+	if (env['EXTENSIONS_GALLERY']) {
+		console.log(`Custom extensions gallery detected. Parsing...`);
+		Object.assign(product, {
+			extensionsGallery: JSON.parse(env['EXTENSIONS_GALLERY'])
+		});
+	} else {
+		console.log(`Using default extensions gallery.`);
+		Object.assign(product, {
+			extensionsGallery: (product.extensionsGallery || {
+				serviceUrl: "https://open-vsx.org/vscode/gallery",
+				itemUrl: "https://open-vsx.org/vscode/item",
+				resourceUrlTemplate: "https://open-vsx.org/vscode/unpkg/{publisher}/{name}/{version}/{path}",
+				controlUrl: "",
+				recommendationsUrl: "",
+				nlsBaseUrl: "",
+				publisherUrl: ""
+			})
+		});
+	}
+	console.log(JSON.stringify(product.extensionsGallery, null, 2));
 }
 
 // Web environment or unknown
Index: sagemaker-code-editor/vscode/src/vs/workbench/contrib/extensions/browser/extensionsViewlet.ts
===================================================================
--- sagemaker-code-editor.orig/vscode/src/vs/workbench/contrib/extensions/browser/extensionsViewlet.ts
+++ sagemaker-code-editor/vscode/src/vs/workbench/contrib/extensions/browser/extensionsViewlet.ts
@@ -64,6 +64,8 @@ import { createActionViewItem } from '..
 import { SeverityIcon } from '../../../../base/browser/ui/severityIcon/severityIcon.js';
 import { StandardKeyboardEvent } from '../../../../base/browser/keyboardEvent.js';
 import { KeyCode } from '../../../../base/common/keyCodes.js';
+import { IProductService } from '../../../../platform/product/common/productService.js';
+import { memoize } from '../../../../base/common/decorators.js';
 import { ThemeIcon } from '../../../../base/common/themables.js';
 import { Codicon } from '../../../../base/common/codicons.js';
 import { IExtensionGalleryManifest, IExtensionGalleryManifestService } from '../../../../platform/extensionManagement/common/extensionGalleryManifest.js';
@@ -531,6 +533,7 @@ export class ExtensionsViewPaneContainer
 		@ICommandService private readonly commandService: ICommandService,
 		@IMcpGalleryService private readonly mcpGalleryService: IMcpGalleryService,
 		@ILogService logService: ILogService,
+		@IProductService private readonly productService: IProductService,
 	) {
 		super(VIEWLET_ID, { mergeViewWithContainerWhenSingleView: true }, instantiationService, configurationService, layoutService, contextMenuService, telemetryService, extensionService, themeService, storageService, contextService, viewDescriptorService, logService);
 
@@ -560,6 +563,15 @@ export class ExtensionsViewPaneContainer
 		this.searchViewletState = this.getMemento(StorageScope.WORKSPACE, StorageTarget.MACHINE);
 	}
 
+	@memoize
+	get extensionsGalleryHostname(): string {
+		if (this.productService.extensionsGallery?.serviceUrl) {
+			return new URL(this.productService.extensionsGallery?.serviceUrl).hostname;
+		}
+
+		return 'Marketplace';
+	}
+
 	get searchValue(): string | undefined {
 		return this.searchBox?.getValue();
 	}
@@ -586,7 +598,7 @@ export class ExtensionsViewPaneContainer
 
 		this.header = append(this.root, $('.header'));
-		const placeholder = localize('searchExtensions', "Search Extensions in Marketplace");
+		const placeholder = localize('searchExtensions', 'Search extensions in {0}', this.extensionsGalleryHostname);
 
 		const searchValue = this.searchViewletState['query.value'] ? this.searchViewletState['query.value'] : '';
 
		const searchContainer = append(this.header, $('.extensions-search-container'));
Index: sagemaker-code-editor/vscode/src/vs/server/node/webClientServer.ts
===================================================================
--- sagemaker-code-editor.orig/vscode/src/vs/server/node/webClientServer.ts
+++ sagemaker-code-editor/vscode/src/vs/server/node/webClientServer.ts
@@ -335,7 +335,6 @@

 		const staticRoute = posix.join(basePath, this._productPath, STATIC_PATH);
 		const callbackRoute = posix.join(basePath, this._productPath, CALLBACK_PATH);
-		const webExtensionRoute = posix.join(basePath, this._productPath, WEB_EXTENSION_PATH);
 
 		const resolveWorkspaceURI = (defaultLocation?: string) => defaultLocation && URI.file(resolve(defaultLocation)).with({ scheme: Schemas.vscodeRemote, authority: remoteAuthority });
 
@@ -347,20 +346,13 @@
		} : undefined;

		const productConfiguration: Partial<Mutable<IProductConfiguration>> = {
			embedderIdentifier: 'server-distro',
-			extensionsGallery: this._webExtensionResourceUrlTemplate && this._productService.extensionsGallery ? {
-				...this._productService.extensionsGallery,
-				resourceUrlTemplate: this._webExtensionResourceUrlTemplate.with({
-					scheme: 'http',
-					authority: remoteAuthority,
-					path: `${webExtensionRoute}/${this._webExtensionResourceUrlTemplate.authority}${this._webExtensionResourceUrlTemplate.path}`
-				}).toString(true)
-			} : undefined
+			extensionsGallery: this._productService.extensionsGallery,
 		};
 
 		const proposedApi = this._environmentService.args['enable-proposed-api'];
 		if (proposedApi?.length) {
 			productConfiguration.extensionsEnabledWithApiProposalVersion ??= [];
 			productConfiguration.extensionsEnabledWithApiProposalVersion.push(...proposedApi);
 		}

Index: sagemaker-code-editor/vscode/product.json
===================================================================
--- sagemaker-code-editor.orig/vscode/product.json
+++ sagemaker-code-editor/vscode/product.json
@@ -33,15 +33,6 @@
 	"webviewContentExternalBaseUrlTemplate": "https://{{uuid}}.vscode-cdn.net/insider/ef65ac1ba57f57f2a3961bfe94aa20481caca4c6/out/vs/workbench/contrib/webview/browser/pre/",
 	"builtInExtensions": [
 	],
-	"extensionsGallery": {
-		"serviceUrl": "https://open-vsx.org/vscode/gallery",
-		"itemUrl": "https://open-vsx.org/vscode/item",
-		"resourceUrlTemplate": "https://open-vsx.org/vscode/unpkg/{publisher}/{name}/{version}/{path}",
-		"controlUrl": "",
-		"recommendationsUrl": "",
-		"nlsBaseUrl": "",
-		"publisherUrl": ""
-	},
 	"linkProtectionTrustedDomains": [
 		"https://open-vsx.org"
 	]
Index: sagemaker-code-editor/vscode/src/vs/platform/extensionResourceLoader/common/extensionResourceLoader.ts
===================================================================
--- sagemaker-code-editor.orig/vscode/src/vs/platform/extensionResourceLoader/common/extensionResourceLoader.ts
+++ sagemaker-code-editor/vscode/src/vs/platform/extensionResourceLoader/common/extensionResourceLoader.ts
@@ -16,7 +16,6 @@ import { getServiceMachineId } from '../../externalServices/common/serviceMachineId.js';
 import { IStorageService } from '../../storage/common/storage.js';
 import { TelemetryLevel } from '../../telemetry/common/telemetry.js';
 import { getTelemetryLevel, supportsTelemetry } from '../../telemetry/common/telemetryUtils.js';
-import { RemoteAuthorities } from '../../../base/common/network.js';
 import { TargetPlatform } from '../../extensions/common/extensions.js';
 
 const WEB_EXTENSION_RESOURCE_END_POINT_SEGMENT = '/web-extension-resource/';
@@ -123,7 +122,7 @@ export abstract class AbstractExtensionR
 					: version,
 				path: 'extension'
 			}));
-			return this._isWebExtensionResourceEndPoint(uri) ? uri.with({ scheme: RemoteAuthorities.getPreferredWebSchema() }) : uri;
+			return this._isWebExtensionResourceEndPoint(uri) ? uri.with({ scheme: 'https' }) : uri;
 		}
 		return undefined;
 	}
@@ -163,9 +162,9 @@ export abstract class AbstractExtensionR
 	}
 
 	protected _isWebExtensionResourceEndPoint(uri: URI): boolean {
-		const uriPath = uri.path, serverRootPath = RemoteAuthorities.getServerRootPath();
-		// test if the path starts with the server root path followed by the web extension resource end point segment
-		return uriPath.startsWith(serverRootPath) && uriPath.startsWith(WEB_EXTENSION_RESOURCE_END_POINT_SEGMENT, serverRootPath.length);
+		const uriPath = uri.path;
+		// test if the path starts with the web extension resource end point segment
+		return uriPath.startsWith(WEB_EXTENSION_RESOURCE_END_POINT_SEGMENT);
 	}

 }
